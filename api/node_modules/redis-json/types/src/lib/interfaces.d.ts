export interface ISetOptions {
    expire?: number;
}
export interface IStringifier {
    [props: string]: (val: any) => string;
}
export interface IParser {
    [props: string]: (val: string) => any;
}
export interface IOptions {
    prefix?: string;
    stringifier?: IStringifier;
    parser?: IParser;
}
export interface IObj<T = any> {
    [anyProp: string]: T;
}
export interface IResult {
    data: IObj<string>;
    typeInfo: IObj<TYPE | string>;
}
export declare enum TYPE {
    OBJECT = "object",
    STRING = "string",
    NUMBER = "number",
    BOOLEAN = "boolean",
    FUNCTION = "function",
    UNDEFINED = "undefined"
}
export declare type Primitives = 'object' | 'string' | 'number' | 'boolean' | 'function' | 'undefined';
export interface ITypes {
    [props: string]: TYPE;
}
